@page "/fetchdata"
@using BlazorExample.Shared
@using System.Diagnostics
@using OpenTelemetry
@using OpenTelemetry.Exporter
@using OpenTelemetry.Resources
@using OpenTelemetry.Trace

@inject HttpClient _http
@inject IConfiguration _configuration

@*
  WebAsm in .Net 6.0 currently single-threaded.  Enforced by depenedent .net libraries.  See comments in program.cs
*@
@* @inject TracerProvider traceProvider *@

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        // var MyActivitySource = new ActivitySource(ClientSemantics.ServiceName);
        // using var activity = MyActivitySource.StartActivity("SayHello");
        // activity?.SetTag("foo", 1);

        using var openTelemetry = Sdk.CreateTracerProviderBuilder()
          .SetResourceBuilder(ResourceBuilder.CreateDefault().AddService("client-otlp-test"))
          .AddSource("BlazorUI-Weather")
          .SetSampler(new AlwaysOnSampler())
          .AddHttpClientInstrumentation(c => c.RecordException = true)
          .AddZipkinExporter(o =>
          {
              o.Endpoint = new Uri($"{_configuration.GetValue<string>("Zipkin:Endpoint")}");
              o.ExportProcessorType = ExportProcessorType.Simple;
          })
          .Build();
        using var source = new ActivitySource("BlazorUI-Weather");
        using (var activity = source.StartActivity("Click", ActivityKind.Client))
        {
            Console.WriteLine(activity.TraceId);
            activity?.AddEvent(new ActivityEvent("The weather button was clicked"));
            activity?.SetTag("mouse.x", 123);
            activity?.SetTag("mouse.y", 2323);
          
            forecasts = await _http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");
          
        }

      await Task.Delay(500);
    }
}
