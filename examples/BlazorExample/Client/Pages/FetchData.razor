@page "/fetchdata"
@using BlazorExample.Shared
@using System.Diagnostics
@using OpenTelemetry
@using OpenTelemetry.Exporter
@using OpenTelemetry.Logs
@using OpenTelemetry.Resources
@using OpenTelemetry.Trace

@inject HttpClient http
@inject IConfiguration configuration
@inject ILogger<FetchData> logger;

@*
    WebAsm in .Net 6.0 currently single-threaded.  Enforced by depenedent .net libraries.  See comments in program.cs
*@
@* @inject TracerProvider traceProvider *@

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        var subscribedSourceName = ClientSemantics.SubscribedSourceName.UIWeatherRequest;
        var resourceBuilder = ResourceBuilder.CreateDefault().AddService(ClientSemantics.ServiceName);

        // Something to listen for activities
        using var openTelemetry = Sdk.CreateTracerProviderBuilder()
            .SetResourceBuilder(resourceBuilder)
            .AddSource(subscribedSourceName)
            .SetSampler(new AlwaysOnSampler())
            .AddHttpClientInstrumentation(c => c.RecordException = true)
            .AddZipkinExporter(o =>
            {
                o.Endpoint = new Uri($"{configuration.GetValue<string>("Zipkin:Endpoint")}");
                o.ExportProcessorType = ExportProcessorType.Simple;
            })
            .Build();

        using var loggingFactory = LoggerFactory.Create(builder =>
        {
            builder.AddOpenTelemetry(options =>
          {
              options.SetResourceBuilder(resourceBuilder);
              options.AddOtlpExporter(otlpOptions =>
              {
                otlpOptions.Protocol = OtlpExportProtocol.HttpProtobuf;
                otlpOptions.ExportProcessorType = ExportProcessorType.Simple;
                otlpOptions.Endpoint = new Uri($"{configuration.GetValue<string>("Otlp:Endpoint")}/v1/logs");
              });
          });
          builder.Services.Configure<OpenTelemetryLoggerOptions>(opt =>
          {
              opt.IncludeScopes = true;
              opt.ParseStateValues = true;
              opt.IncludeFormattedMessage = true;
          });
        });

        var logger = loggingFactory.CreateLogger<Counter>();

        using var source = new ActivitySource(subscribedSourceName);
        using (var activity = source.StartActivity(ClientSemantics.DisplayName.WeatherButtonClick, ActivityKind.Client))
        {
            // Console.WriteLine(activity?.TraceId);
            activity?.AddEvent(new ActivityEvent("The weather button was clicked"));
            activity?.SetTag("mouse.x", 123);
            activity?.SetTag("mouse.y", 2323);

            logger.LogInformation("The weather button was clicked");

            // .AddHttpClientInstrumentation extension enabled capture of this http call.
            forecasts = await http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");
        }
    }
}
